{"ast":null,"code":"'use strict';\n/** Highest positive signed 32-bit float value */\n\nimport _createForOfIteratorHelper from \"C:/Users/HP/workspace/2copo-fe/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _toConsumableArray from \"C:/Users/HP/workspace/2copo-fe/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\n\nvar base = 36;\nvar tMin = 1;\nvar tMax = 26;\nvar skew = 38;\nvar damp = 700;\nvar initialBias = 72;\nvar initialN = 128; // 0x80\n\nvar delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\n\nvar regexPunycode = /^xn--/;\nvar regexNonASCII = /[^\\0-\\x7E]/; // non-ASCII chars\n\nvar regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\n\nvar errors = {\n  'overflow': 'Overflow: input needs wider integers to process',\n  'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n  'invalid-input': 'Invalid input'\n};\n/** Convenience shortcuts */\n\nvar baseMinusTMin = base - tMin;\nvar floor = Math.floor;\nvar stringFromCharCode = String.fromCharCode;\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\n\nfunction error(type) {\n  throw new RangeError(errors[type]);\n}\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\n\n\nfunction map(array, fn) {\n  var result = [];\n  var length = array.length;\n\n  while (length--) {\n    result[length] = fn(array[length]);\n  }\n\n  return result;\n}\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {Array} A new string of characters returned by the callback\n * function.\n */\n\n\nfunction mapDomain(string, fn) {\n  var parts = string.split('@');\n  var result = '';\n\n  if (parts.length > 1) {\n    // In email addresses, only the domain name should be punycoded. Leave\n    // the local part (i.e. everything up to `@`) intact.\n    result = parts[0] + '@';\n    string = parts[1];\n  } // Avoid `split(regex)` for IE8 compatibility. See #17.\n\n\n  string = string.replace(regexSeparators, '\\x2E');\n  var labels = string.split('.');\n  var encoded = map(labels, fn).join('.');\n  return result + encoded;\n}\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\n\n\nfunction ucs2decode(string) {\n  var output = [];\n  var counter = 0;\n  var length = string.length;\n\n  while (counter < length) {\n    var value = string.charCodeAt(counter++);\n\n    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n      // It's a high surrogate, and there is a next character.\n      var extra = string.charCodeAt(counter++);\n\n      if ((extra & 0xFC00) == 0xDC00) {\n        // Low surrogate.\n        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n      } else {\n        // It's an unmatched surrogate; only append this code unit, in case the\n        // next code unit is the high surrogate of a surrogate pair.\n        output.push(value);\n        counter--;\n      }\n    } else {\n      output.push(value);\n    }\n  }\n\n  return output;\n}\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\n\n\nvar ucs2encode = function ucs2encode(array) {\n  return String.fromCodePoint.apply(String, _toConsumableArray(array));\n};\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\n\n\nvar basicToDigit = function basicToDigit(codePoint) {\n  if (codePoint - 0x30 < 0x0A) {\n    return codePoint - 0x16;\n  }\n\n  if (codePoint - 0x41 < 0x1A) {\n    return codePoint - 0x41;\n  }\n\n  if (codePoint - 0x61 < 0x1A) {\n    return codePoint - 0x61;\n  }\n\n  return base;\n};\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\n\n\nvar digitToBasic = function digitToBasic(digit, flag) {\n  //  0..25 map to ASCII a..z or A..Z\n  // 26..35 map to ASCII 0..9\n  return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\n\n\nvar adapt = function adapt(delta, numPoints, firstTime) {\n  var k = 0;\n  delta = firstTime ? floor(delta / damp) : delta >> 1;\n  delta += floor(delta / numPoints);\n\n  for (;\n  /* no initialization */\n  delta > baseMinusTMin * tMax >> 1; k += base) {\n    delta = floor(delta / baseMinusTMin);\n  }\n\n  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\n\n\nvar decode = function decode(input) {\n  // Don't use UCS-2.\n  var output = [];\n  var inputLength = input.length;\n  var i = 0;\n  var n = initialN;\n  var bias = initialBias; // Handle the basic code points: let `basic` be the number of input code\n  // points before the last delimiter, or `0` if there is none, then copy\n  // the first basic code points to the output.\n\n  var basic = input.lastIndexOf(delimiter);\n\n  if (basic < 0) {\n    basic = 0;\n  }\n\n  for (var j = 0; j < basic; ++j) {\n    // if it's not a basic code point\n    if (input.charCodeAt(j) >= 0x80) {\n      error('not-basic');\n    }\n\n    output.push(input.charCodeAt(j));\n  } // Main decoding loop: start just after the last delimiter if any basic code\n  // points were copied; start at the beginning otherwise.\n\n\n  for (var index = basic > 0 ? basic + 1 : 0; index < inputLength;)\n  /* no final expression */\n  {\n    // `index` is the index of the next character to be consumed.\n    // Decode a generalized variable-length integer into `delta`,\n    // which gets added to `i`. The overflow checking is easier\n    // if we increase `i` as we go, then subtract off its starting\n    // value at the end to obtain `delta`.\n    var oldi = i;\n\n    for (var w = 1, k = base;;\n    /* no condition */\n    k += base) {\n      if (index >= inputLength) {\n        error('invalid-input');\n      }\n\n      var digit = basicToDigit(input.charCodeAt(index++));\n\n      if (digit >= base || digit > floor((maxInt - i) / w)) {\n        error('overflow');\n      }\n\n      i += digit * w;\n      var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n\n      if (digit < t) {\n        break;\n      }\n\n      var baseMinusT = base - t;\n\n      if (w > floor(maxInt / baseMinusT)) {\n        error('overflow');\n      }\n\n      w *= baseMinusT;\n    }\n\n    var out = output.length + 1;\n    bias = adapt(i - oldi, out, oldi == 0); // `i` was supposed to wrap around from `out` to `0`,\n    // incrementing `n` each time, so we'll fix that now:\n\n    if (floor(i / out) > maxInt - n) {\n      error('overflow');\n    }\n\n    n += floor(i / out);\n    i %= out; // Insert `n` at position `i` of the output.\n\n    output.splice(i++, 0, n);\n  }\n\n  return String.fromCodePoint.apply(String, output);\n};\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\n\n\nvar encode = function encode(input) {\n  var output = []; // Convert the input in UCS-2 to an array of Unicode code points.\n\n  input = ucs2decode(input); // Cache the length.\n\n  var inputLength = input.length; // Initialize the state.\n\n  var n = initialN;\n  var delta = 0;\n  var bias = initialBias; // Handle the basic code points.\n\n  var _iterator = _createForOfIteratorHelper(input),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _currentValue2 = _step.value;\n\n      if (_currentValue2 < 0x80) {\n        output.push(stringFromCharCode(_currentValue2));\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var basicLength = output.length;\n  var handledCPCount = basicLength; // `handledCPCount` is the number of code points that have been handled;\n  // `basicLength` is the number of basic code points.\n  // Finish the basic string with a delimiter unless it's empty.\n\n  if (basicLength) {\n    output.push(delimiter);\n  } // Main encoding loop:\n\n\n  while (handledCPCount < inputLength) {\n    // All non-basic code points < n have been handled already. Find the next\n    // larger one:\n    var m = maxInt;\n\n    var _iterator2 = _createForOfIteratorHelper(input),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var currentValue = _step2.value;\n\n        if (currentValue >= n && currentValue < m) {\n          m = currentValue;\n        }\n      } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n      // but guard against overflow.\n\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    var handledCPCountPlusOne = handledCPCount + 1;\n\n    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n      error('overflow');\n    }\n\n    delta += (m - n) * handledCPCountPlusOne;\n    n = m;\n\n    var _iterator3 = _createForOfIteratorHelper(input),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var _currentValue = _step3.value;\n\n        if (_currentValue < n && ++delta > maxInt) {\n          error('overflow');\n        }\n\n        if (_currentValue == n) {\n          // Represent delta as a generalized variable-length integer.\n          var q = delta;\n\n          for (var k = base;;\n          /* no condition */\n          k += base) {\n            var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n\n            if (q < t) {\n              break;\n            }\n\n            var qMinusT = q - t;\n            var baseMinusT = base - t;\n            output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));\n            q = floor(qMinusT / baseMinusT);\n          }\n\n          output.push(stringFromCharCode(digitToBasic(q, 0)));\n          bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n          delta = 0;\n          ++handledCPCount;\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    ++delta;\n    ++n;\n  }\n\n  return output.join('');\n};\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\n\n\nvar toUnicode = function toUnicode(input) {\n  return mapDomain(input, function (string) {\n    return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;\n  });\n};\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\n\n\nvar toASCII = function toASCII(input) {\n  return mapDomain(input, function (string) {\n    return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;\n  });\n};\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\n\n\nvar punycode = {\n  /**\n   * A string representing the current Punycode.js version number.\n   * @memberOf punycode\n   * @type String\n   */\n  'version': '2.1.0',\n\n  /**\n   * An object of methods to convert from JavaScript's internal character\n   * representation (UCS-2) to Unicode code points, and back.\n   * @see <https://mathiasbynens.be/notes/javascript-encoding>\n   * @memberOf punycode\n   * @type Object\n   */\n  'ucs2': {\n    'decode': ucs2decode,\n    'encode': ucs2encode\n  },\n  'decode': decode,\n  'encode': encode,\n  'toASCII': toASCII,\n  'toUnicode': toUnicode\n};\nexport { ucs2decode, ucs2encode, decode, encode, toASCII, toUnicode };\nexport default punycode;","map":{"version":3,"sources":["C:/Users/HP/workspace/2copo-fe/node_modules/punycode/punycode.es6.js"],"names":["maxInt","base","tMin","tMax","skew","damp","initialBias","initialN","delimiter","regexPunycode","regexNonASCII","regexSeparators","errors","baseMinusTMin","floor","Math","stringFromCharCode","String","fromCharCode","error","type","RangeError","map","array","fn","result","length","mapDomain","string","parts","split","replace","labels","encoded","join","ucs2decode","output","counter","value","charCodeAt","extra","push","ucs2encode","fromCodePoint","basicToDigit","codePoint","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","k","decode","input","inputLength","i","n","bias","basic","lastIndexOf","j","index","oldi","w","t","baseMinusT","out","splice","encode","currentValue","basicLength","handledCPCount","m","handledCPCountPlusOne","q","qMinusT","toUnicode","test","slice","toLowerCase","toASCII","punycode"],"mappings":"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","sourcesContent":["'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7E]/; // non-ASCII chars\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, fn) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = fn(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {Array} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(string, fn) {\n\tconst parts = string.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tstring = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tstring = string.replace(regexSeparators, '\\x2E');\n\tconst labels = string.split('.');\n\tconst encoded = map(labels, fn).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = array => String.fromCodePoint(...array);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint - 0x30 < 0x0A) {\n\t\treturn codePoint - 0x16;\n\t}\n\tif (codePoint - 0x41 < 0x1A) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint - 0x61 < 0x1A) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tlet oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tlet inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tlet basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue == n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.1.0',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nexport { ucs2decode, ucs2encode, decode, encode, toASCII, toUnicode };\nexport default punycode;\n"]},"metadata":{},"sourceType":"module"}