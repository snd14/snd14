{"ast":null,"code":"import _toConsumableArray from \"C:/Users/HP/workspace/2copo-fe/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"C:/Users/HP/workspace/2copo-fe/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"C:/Users/HP/workspace/2copo-fe/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"C:/Users/HP/workspace/2copo-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/HP/workspace/2copo-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __awaiter } from 'tslib';\nimport { Injectable, NgModule } from '@angular/core';\nimport { HttpHeaders, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Subject, from } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport * as Keycloak_ from 'keycloak-js';\nimport { CommonModule } from '@angular/common';\nimport * as Éµngcc0 from '@angular/core';\nvar KeycloakEventType;\n\n(function (KeycloakEventType) {\n  KeycloakEventType[KeycloakEventType[\"OnAuthError\"] = 0] = \"OnAuthError\";\n  KeycloakEventType[KeycloakEventType[\"OnAuthLogout\"] = 1] = \"OnAuthLogout\";\n  KeycloakEventType[KeycloakEventType[\"OnAuthRefreshError\"] = 2] = \"OnAuthRefreshError\";\n  KeycloakEventType[KeycloakEventType[\"OnAuthRefreshSuccess\"] = 3] = \"OnAuthRefreshSuccess\";\n  KeycloakEventType[KeycloakEventType[\"OnAuthSuccess\"] = 4] = \"OnAuthSuccess\";\n  KeycloakEventType[KeycloakEventType[\"OnReady\"] = 5] = \"OnReady\";\n  KeycloakEventType[KeycloakEventType[\"OnTokenExpired\"] = 6] = \"OnTokenExpired\";\n})(KeycloakEventType || (KeycloakEventType = {}));\n\nvar KeycloakAuthGuard = /*#__PURE__*/function () {\n  function KeycloakAuthGuard(router, keycloakAngular) {\n    _classCallCheck(this, KeycloakAuthGuard);\n\n    this.router = router;\n    this.keycloakAngular = keycloakAngular;\n  }\n\n  _createClass(KeycloakAuthGuard, [{\n    key: \"canActivate\",\n    value: function canActivate(route, state) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var result;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.prev = 0;\n                  _context.next = 3;\n                  return this.keycloakAngular.isLoggedIn();\n\n                case 3:\n                  this.authenticated = _context.sent;\n                  _context.next = 6;\n                  return this.keycloakAngular.getUserRoles(true);\n\n                case 6:\n                  this.roles = _context.sent;\n                  _context.next = 9;\n                  return this.isAccessAllowed(route, state);\n\n                case 9:\n                  result = _context.sent;\n                  resolve(result);\n                  _context.next = 16;\n                  break;\n\n                case 13:\n                  _context.prev = 13;\n                  _context.t0 = _context[\"catch\"](0);\n                  reject('An error happened during access validation. Details:' + _context.t0);\n\n                case 16:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this, [[0, 13]]);\n        }));\n      });\n    }\n  }]);\n\n  return KeycloakAuthGuard;\n}();\n\nvar Keycloak = Keycloak_;\n\nvar KeycloakService = /*#__PURE__*/function () {\n  function KeycloakService() {\n    _classCallCheck(this, KeycloakService);\n\n    this._keycloakEvents$ = new Subject();\n  }\n\n  _createClass(KeycloakService, [{\n    key: \"bindsKeycloakEvents\",\n    value: function bindsKeycloakEvents() {\n      var _this2 = this;\n\n      this._instance.onAuthError = function (errorData) {\n        _this2._keycloakEvents$.next({\n          args: errorData,\n          type: KeycloakEventType.OnAuthError\n        });\n      };\n\n      this._instance.onAuthLogout = function () {\n        _this2._keycloakEvents$.next({\n          type: KeycloakEventType.OnAuthLogout\n        });\n      };\n\n      this._instance.onAuthRefreshSuccess = function () {\n        _this2._keycloakEvents$.next({\n          type: KeycloakEventType.OnAuthRefreshSuccess\n        });\n      };\n\n      this._instance.onAuthRefreshError = function () {\n        _this2._keycloakEvents$.next({\n          type: KeycloakEventType.OnAuthRefreshError\n        });\n      };\n\n      this._instance.onAuthSuccess = function () {\n        _this2._keycloakEvents$.next({\n          type: KeycloakEventType.OnAuthSuccess\n        });\n      };\n\n      this._instance.onTokenExpired = function () {\n        _this2._keycloakEvents$.next({\n          type: KeycloakEventType.OnTokenExpired\n        });\n      };\n\n      this._instance.onReady = function (authenticated) {\n        _this2._keycloakEvents$.next({\n          args: authenticated,\n          type: KeycloakEventType.OnReady\n        });\n      };\n    }\n  }, {\n    key: \"loadExcludedUrls\",\n    value: function loadExcludedUrls(bearerExcludedUrls) {\n      var excludedUrls = [];\n\n      var _iterator = _createForOfIteratorHelper(bearerExcludedUrls),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n          var excludedUrl = void 0;\n\n          if (typeof item === 'string') {\n            excludedUrl = {\n              urlPattern: new RegExp(item, 'i'),\n              httpMethods: []\n            };\n          } else {\n            excludedUrl = {\n              urlPattern: new RegExp(item.url, 'i'),\n              httpMethods: item.httpMethods\n            };\n          }\n\n          excludedUrls.push(excludedUrl);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return excludedUrls;\n    }\n  }, {\n    key: \"initServiceValues\",\n    value: function initServiceValues(_ref) {\n      var _ref$enableBearerInte = _ref.enableBearerInterceptor,\n          enableBearerInterceptor = _ref$enableBearerInte === void 0 ? true : _ref$enableBearerInte,\n          _ref$loadUserProfileA = _ref.loadUserProfileAtStartUp,\n          loadUserProfileAtStartUp = _ref$loadUserProfileA === void 0 ? false : _ref$loadUserProfileA,\n          _ref$bearerExcludedUr = _ref.bearerExcludedUrls,\n          bearerExcludedUrls = _ref$bearerExcludedUr === void 0 ? [] : _ref$bearerExcludedUr,\n          _ref$authorizationHea = _ref.authorizationHeaderName,\n          authorizationHeaderName = _ref$authorizationHea === void 0 ? 'Authorization' : _ref$authorizationHea,\n          _ref$bearerPrefix = _ref.bearerPrefix,\n          bearerPrefix = _ref$bearerPrefix === void 0 ? 'Bearer' : _ref$bearerPrefix,\n          initOptions = _ref.initOptions;\n      this._enableBearerInterceptor = enableBearerInterceptor;\n      this._loadUserProfileAtStartUp = loadUserProfileAtStartUp;\n      this._authorizationHeaderName = authorizationHeaderName;\n      this._bearerPrefix = bearerPrefix.trim().concat(' ');\n      this._excludedUrls = this.loadExcludedUrls(bearerExcludedUrls);\n      this._silentRefresh = initOptions ? initOptions.flow === 'implicit' : false;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var config, initOptions, authenticated;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.initServiceValues(options);\n                config = options.config, initOptions = options.initOptions;\n                this._instance = Keycloak(config);\n                this.bindsKeycloakEvents();\n                _context2.next = 6;\n                return this._instance.init(initOptions);\n\n              case 6:\n                authenticated = _context2.sent;\n\n                if (!(authenticated && this._loadUserProfileAtStartUp)) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                _context2.next = 10;\n                return this.loadUserProfile();\n\n              case 10:\n                return _context2.abrupt(\"return\", authenticated);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"login\",\n    value: function login() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this._instance.login(options);\n\n              case 2:\n                if (!this._loadUserProfileAtStartUp) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                _context3.next = 5;\n                return this.loadUserProfile();\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"logout\",\n    value: function logout(redirectUri) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var options;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = {\n                  redirectUri: redirectUri\n                };\n                _context4.next = 3;\n                return this._instance.logout(options);\n\n              case 3:\n                this._userProfile = undefined;\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }, {\n    key: \"register\",\n    value: function register() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        action: 'register'\n      };\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._instance.register(options);\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"isUserInRole\",\n    value: function isUserInRole(role, resource) {\n      var hasRole;\n      hasRole = this._instance.hasResourceRole(role, resource);\n\n      if (!hasRole) {\n        hasRole = this._instance.hasRealmRole(role);\n      }\n\n      return hasRole;\n    }\n  }, {\n    key: \"getUserRoles\",\n    value: function getUserRoles() {\n      var allRoles = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var roles = [];\n\n      if (this._instance.resourceAccess) {\n        for (var key in this._instance.resourceAccess) {\n          if (this._instance.resourceAccess.hasOwnProperty(key)) {\n            var resourceAccess = this._instance.resourceAccess[key];\n            var clientRoles = resourceAccess['roles'] || [];\n            roles = roles.concat(clientRoles);\n          }\n        }\n      }\n\n      if (allRoles && this._instance.realmAccess) {\n        var _roles;\n\n        var realmRoles = this._instance.realmAccess['roles'] || [];\n\n        (_roles = roles).push.apply(_roles, _toConsumableArray(realmRoles));\n      }\n\n      return roles;\n    }\n  }, {\n    key: \"isLoggedIn\",\n    value: function isLoggedIn() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n\n                if (this._instance.authenticated) {\n                  _context6.next = 3;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", false);\n\n              case 3:\n                _context6.next = 5;\n                return this.updateToken(20);\n\n              case 5:\n                return _context6.abrupt(\"return\", true);\n\n              case 8:\n                _context6.prev = 8;\n                _context6.t0 = _context6[\"catch\"](0);\n                return _context6.abrupt(\"return\", false);\n\n              case 11:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[0, 8]]);\n      }));\n    }\n  }, {\n    key: \"isTokenExpired\",\n    value: function isTokenExpired() {\n      var minValidity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      return this._instance.isTokenExpired(minValidity);\n    }\n  }, {\n    key: \"updateToken\",\n    value: function updateToken() {\n      var minValidity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!this._silentRefresh) {\n                  _context7.next = 4;\n                  break;\n                }\n\n                if (!this.isTokenExpired()) {\n                  _context7.next = 3;\n                  break;\n                }\n\n                throw new Error('Failed to refresh the token, or the session is expired');\n\n              case 3:\n                return _context7.abrupt(\"return\", true);\n\n              case 4:\n                if (this._instance) {\n                  _context7.next = 6;\n                  break;\n                }\n\n                throw new Error('Keycloak Angular library is not initialized.');\n\n              case 6:\n                return _context7.abrupt(\"return\", this._instance.updateToken(minValidity));\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    }\n  }, {\n    key: \"loadUserProfile\",\n    value: function loadUserProfile() {\n      var forceReload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (!(this._userProfile && !forceReload)) {\n                  _context8.next = 2;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", this._userProfile);\n\n              case 2:\n                if (this._instance.authenticated) {\n                  _context8.next = 4;\n                  break;\n                }\n\n                throw new Error('The user profile was not loaded as the user is not logged in.');\n\n              case 4:\n                _context8.next = 6;\n                return this._instance.loadUserProfile();\n\n              case 6:\n                return _context8.abrupt(\"return\", this._userProfile = _context8.sent);\n\n              case 7:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.updateToken(10);\n\n              case 2:\n                return _context9.abrupt(\"return\", this._instance.token);\n\n              case 3:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n    }\n  }, {\n    key: \"getUsername\",\n    value: function getUsername() {\n      if (!this._userProfile) {\n        throw new Error('User not logged in or user profile was not loaded.');\n      }\n\n      return this._userProfile.username;\n    }\n  }, {\n    key: \"clearToken\",\n    value: function clearToken() {\n      this._instance.clearToken();\n    }\n  }, {\n    key: \"addTokenToHeader\",\n    value: function addTokenToHeader() {\n      var _this3 = this;\n\n      var headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new HttpHeaders();\n      return from(this.getToken()).pipe(map(function (token) {\n        return token ? headers.set(_this3._authorizationHeaderName, _this3._bearerPrefix + token) : headers;\n      }));\n    }\n  }, {\n    key: \"getKeycloakInstance\",\n    value: function getKeycloakInstance() {\n      return this._instance;\n    }\n  }, {\n    key: \"excludedUrls\",\n    get: function get() {\n      return this._excludedUrls;\n    }\n  }, {\n    key: \"enableBearerInterceptor\",\n    get: function get() {\n      return this._enableBearerInterceptor;\n    }\n  }, {\n    key: \"keycloakEvents$\",\n    get: function get() {\n      return this._keycloakEvents$;\n    }\n  }]);\n\n  return KeycloakService;\n}();\n\nKeycloakService.Éµfac = function KeycloakService_Factory(t) {\n  return new (t || KeycloakService)();\n};\n\nKeycloakService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({\n  token: KeycloakService,\n  factory: KeycloakService.Éµfac\n});\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(KeycloakService, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\nvar KeycloakBearerInterceptor = /*#__PURE__*/function () {\n  function KeycloakBearerInterceptor(keycloak) {\n    _classCallCheck(this, KeycloakBearerInterceptor);\n\n    this.keycloak = keycloak;\n  }\n\n  _createClass(KeycloakBearerInterceptor, [{\n    key: \"isUrlExcluded\",\n    value: function isUrlExcluded(_ref2, _ref3) {\n      var method = _ref2.method,\n          url = _ref2.url;\n      var urlPattern = _ref3.urlPattern,\n          httpMethods = _ref3.httpMethods;\n      var httpTest = httpMethods.length === 0 || httpMethods.join().indexOf(method.toUpperCase()) > -1;\n      var urlTest = urlPattern.test(url);\n      return httpTest && urlTest;\n    }\n  }, {\n    key: \"intercept\",\n    value: function intercept(req, next) {\n      var _this4 = this;\n\n      var _this$keycloak = this.keycloak,\n          enableBearerInterceptor = _this$keycloak.enableBearerInterceptor,\n          excludedUrls = _this$keycloak.excludedUrls;\n\n      if (!enableBearerInterceptor) {\n        return next.handle(req);\n      }\n\n      var shallPass = excludedUrls.findIndex(function (item) {\n        return _this4.isUrlExcluded(req, item);\n      }) > -1;\n\n      if (shallPass) {\n        return next.handle(req);\n      }\n\n      return from(this.keycloak.isLoggedIn()).pipe(mergeMap(function (loggedIn) {\n        return loggedIn ? _this4.handleRequestWithTokenHeader(req, next) : next.handle(req);\n      }));\n    }\n  }, {\n    key: \"handleRequestWithTokenHeader\",\n    value: function handleRequestWithTokenHeader(req, next) {\n      return this.keycloak.addTokenToHeader(req.headers).pipe(mergeMap(function (headersWithBearer) {\n        var kcReq = req.clone({\n          headers: headersWithBearer\n        });\n        return next.handle(kcReq);\n      }));\n    }\n  }]);\n\n  return KeycloakBearerInterceptor;\n}();\n\nKeycloakBearerInterceptor.Éµfac = function KeycloakBearerInterceptor_Factory(t) {\n  return new (t || KeycloakBearerInterceptor)(Éµngcc0.ÉµÉµinject(KeycloakService));\n};\n\nKeycloakBearerInterceptor.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({\n  token: KeycloakBearerInterceptor,\n  factory: KeycloakBearerInterceptor.Éµfac\n});\n\nKeycloakBearerInterceptor.ctorParameters = function () {\n  return [{\n    type: KeycloakService\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(KeycloakBearerInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: KeycloakService\n    }];\n  }, null);\n})();\n\nvar CoreModule = function CoreModule() {\n  _classCallCheck(this, CoreModule);\n};\n\nCoreModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({\n  type: CoreModule\n});\nCoreModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({\n  factory: function CoreModule_Factory(t) {\n    return new (t || CoreModule)();\n  },\n  providers: [KeycloakService, {\n    provide: HTTP_INTERCEPTORS,\n    useClass: KeycloakBearerInterceptor,\n    multi: true\n  }],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(CoreModule, {\n    imports: function imports() {\n      return [CommonModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(CoreModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      providers: [KeycloakService, {\n        provide: HTTP_INTERCEPTORS,\n        useClass: KeycloakBearerInterceptor,\n        multi: true\n      }]\n    }]\n  }], null, null);\n})();\n\nvar KeycloakAngularModule = function KeycloakAngularModule() {\n  _classCallCheck(this, KeycloakAngularModule);\n};\n\nKeycloakAngularModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({\n  type: KeycloakAngularModule\n});\nKeycloakAngularModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({\n  factory: function KeycloakAngularModule_Factory(t) {\n    return new (t || KeycloakAngularModule)();\n  },\n  imports: [[CoreModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(KeycloakAngularModule, {\n    imports: [CoreModule]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(KeycloakAngularModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CoreModule]\n    }]\n  }], null, null);\n})();\n\nexport { CoreModule, KeycloakAngularModule, KeycloakAuthGuard, KeycloakBearerInterceptor, KeycloakEventType, KeycloakService };","map":{"version":3,"sources":["../../../projects/keycloak-angular/src/lib/core/interfaces/keycloak-event.ts","../../../projects/keycloak-angular/src/lib/core/services/keycloak-auth-guard.ts","../../../projects/keycloak-angular/src/lib/core/services/keycloak.service.ts","../../../projects/keycloak-angular/src/lib/core/interceptors/keycloak-bearer.interceptor.ts","../../../projects/keycloak-angular/src/lib/core/core.module.ts","../../../projects/keycloak-angular/src/lib/keycloak-angular.module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Mauricio Gemelli Vigolo and contributors.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/LICENSE\n */\n\n/**\n * Keycloak event types, as described at the keycloak-js documentation:\n * https://www.keycloak.org/docs/latest/securing_apps/index.html#callback-events\n */\nexport enum KeycloakEventType {\n  /**\n   * Called if there was an error during authentication.\n   */\n  OnAuthError,\n  /**\n   * Called if the user is logged out\n   * (will only be called if the session status iframe is enabled, or in Cordova mode).\n   */\n  OnAuthLogout,\n  /**\n   * Called if there was an error while trying to refresh the token.\n   */\n  OnAuthRefreshError,\n  /**\n   * Called when the token is refreshed.\n   */\n  OnAuthRefreshSuccess,\n  /**\n   * Called when a user is successfully authenticated.\n   */\n  OnAuthSuccess,\n  /**\n   * Called when the adapter is initialized.\n   */\n  OnReady,\n  /**\n   * Called when the access token is expired. If a refresh token is available the token\n   * can be refreshed with updateToken, or in cases where it is not (that is, with implicit flow)\n   * you can redirect to login screen to obtain a new access token.\n   */\n  OnTokenExpired\n}\n\n/**\n * Structure of an event triggered by Keycloak, contains it's type\n * and arguments (if any).\n */\nexport interface KeycloakEvent {\n  /**\n   * Event type as described at {@link KeycloakEventType}.\n   */\n  type: KeycloakEventType;\n  /**\n   * Arguments from the keycloak-js event function.\n   */\n  args?: any;\n}\n","/**\n * @license\n * Copyright Mauricio Gemelli Vigolo and contributors.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/LICENSE\n */\n\nimport { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\n\nimport { KeycloakService } from './keycloak.service';\n\n/**\n * A simple guard implementation out of the box. This class should be inherited and\n * implemented by the application. The only method that should be implemented is #isAccessAllowed.\n * The reason for this is that the authorization flow is usually not unique, so in this way you will\n * have more freedom to customize your authorization flow.\n */\nexport abstract class KeycloakAuthGuard implements CanActivate {\n  /**\n   * Indicates if the user is authenticated or not.\n   */\n  protected authenticated: boolean;\n  /**\n   * Roles of the logged user. It contains the clientId and realm user roles.\n   */\n  protected roles: string[];\n\n  constructor(protected router: Router, protected keycloakAngular: KeycloakService) {}\n\n  /**\n   * CanActivate checks if the user is logged in and get the full list of roles (REALM + CLIENT)\n   * of the logged user. This values are set to authenticated and roles params.\n   *\n   * @param route\n   * @param state\n   */\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean | UrlTree> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        this.authenticated = await this.keycloakAngular.isLoggedIn();\n        this.roles = await this.keycloakAngular.getUserRoles(true);\n\n        const result = await this.isAccessAllowed(route, state);\n        resolve(result);\n      } catch (error) {\n        reject('An error happened during access validation. Details:' + error);\n      }\n    });\n  }\n\n  /**\n   * Create your own customized authorization flow in this method. From here you already known\n   * if the user is authenticated (this.authenticated) and the user roles (this.roles).\n   *\n   * Return a UrlTree if the user should be redirected to another route.\n   *\n   * @param route\n   * @param state\n   */\n  abstract isAccessAllowed(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Promise<boolean | UrlTree>;\n}\n","/**\n * @license\n * Copyright Mauricio Gemelli Vigolo and contributors.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/LICENSE\n */\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\n\nimport { Subject, from } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n// Workaround for rollup library behaviour, as pointed out on issue #1267 (https://github.com/rollup/rollup/issues/1267).\nimport * as Keycloak_ from 'keycloak-js';\nexport const Keycloak = Keycloak_;\n\nimport {\n  ExcludedUrl,\n  ExcludedUrlRegex,\n  KeycloakOptions,\n} from '../interfaces/keycloak-options';\nimport { KeycloakEvent, KeycloakEventType } from '../interfaces/keycloak-event';\n\n/**\n * Service to expose existent methods from the Keycloak JS adapter, adding new\n * functionalities to improve the use of keycloak in Angular v > 4.3 applications.\n *\n * This class should be injected in the application bootstrap, so the same instance will be used\n * along the web application.\n */\n@Injectable()\nexport class KeycloakService {\n  /**\n   * Keycloak-js instance.\n   */\n  private _instance: Keycloak.KeycloakInstance;\n  /**\n   * User profile as KeycloakProfile interface.\n   */\n  private _userProfile: Keycloak.KeycloakProfile;\n  /**\n   * Flag to indicate if the bearer will not be added to the authorization header.\n   */\n  private _enableBearerInterceptor: boolean;\n  /**\n   * When the implicit flow is choosen there must exist a silentRefresh, as there is\n   * no refresh token.\n   */\n  private _silentRefresh: boolean;\n  /**\n   * Indicates that the user profile should be loaded at the keycloak initialization,\n   * just after the login.\n   */\n  private _loadUserProfileAtStartUp: boolean;\n  /**\n   * The bearer prefix that will be appended to the Authorization Header.\n   */\n  private _bearerPrefix: string;\n  /**\n   * Value that will be used as the Authorization Http Header name.\n   */\n  private _authorizationHeaderName: string;\n  /**\n   * The excluded urls patterns that must skip the KeycloakBearerInterceptor.\n   */\n  private _excludedUrls: ExcludedUrlRegex[];\n  /**\n   * Observer for the keycloak events\n   */\n  private _keycloakEvents$: Subject<KeycloakEvent> = new Subject<\n    KeycloakEvent\n  >();\n\n  /**\n   * Binds the keycloak-js events to the keycloakEvents Subject\n   * which is a good way to monitor for changes, if needed.\n   *\n   * The keycloakEvents returns the keycloak-js event type and any\n   * argument if the source function provides any.\n   */\n  private bindsKeycloakEvents(): void {\n    this._instance.onAuthError = (errorData) => {\n      this._keycloakEvents$.next({\n        args: errorData,\n        type: KeycloakEventType.OnAuthError,\n      });\n    };\n\n    this._instance.onAuthLogout = () => {\n      this._keycloakEvents$.next({ type: KeycloakEventType.OnAuthLogout });\n    };\n\n    this._instance.onAuthRefreshSuccess = () => {\n      this._keycloakEvents$.next({\n        type: KeycloakEventType.OnAuthRefreshSuccess,\n      });\n    };\n\n    this._instance.onAuthRefreshError = () => {\n      this._keycloakEvents$.next({\n        type: KeycloakEventType.OnAuthRefreshError,\n      });\n    };\n\n    this._instance.onAuthSuccess = () => {\n      this._keycloakEvents$.next({ type: KeycloakEventType.OnAuthSuccess });\n    };\n\n    this._instance.onTokenExpired = () => {\n      this._keycloakEvents$.next({\n        type: KeycloakEventType.OnTokenExpired,\n      });\n    };\n\n    this._instance.onReady = (authenticated) => {\n      this._keycloakEvents$.next({\n        args: authenticated,\n        type: KeycloakEventType.OnReady,\n      });\n    };\n  }\n\n  /**\n   * Loads all bearerExcludedUrl content in a uniform type: ExcludedUrl,\n   * so it becomes easier to handle.\n   *\n   * @param bearerExcludedUrls array of strings or ExcludedUrl that includes\n   * the url and HttpMethod.\n   */\n  private loadExcludedUrls(\n    bearerExcludedUrls: (string | ExcludedUrl)[]\n  ): ExcludedUrlRegex[] {\n    const excludedUrls: ExcludedUrlRegex[] = [];\n    for (const item of bearerExcludedUrls) {\n      let excludedUrl: ExcludedUrlRegex;\n      if (typeof item === 'string') {\n        excludedUrl = { urlPattern: new RegExp(item, 'i'), httpMethods: [] };\n      } else {\n        excludedUrl = {\n          urlPattern: new RegExp(item.url, 'i'),\n          httpMethods: item.httpMethods,\n        };\n      }\n      excludedUrls.push(excludedUrl);\n    }\n    return excludedUrls;\n  }\n\n  /**\n   * Handles the class values initialization.\n   *\n   * @param options\n   */\n  private initServiceValues({\n    enableBearerInterceptor = true,\n    loadUserProfileAtStartUp = false,\n    bearerExcludedUrls = [],\n    authorizationHeaderName = 'Authorization',\n    bearerPrefix = 'Bearer',\n    initOptions,\n  }: KeycloakOptions): void {\n    this._enableBearerInterceptor = enableBearerInterceptor;\n    this._loadUserProfileAtStartUp = loadUserProfileAtStartUp;\n    this._authorizationHeaderName = authorizationHeaderName;\n    this._bearerPrefix = bearerPrefix.trim().concat(' ');\n    this._excludedUrls = this.loadExcludedUrls(bearerExcludedUrls);\n    this._silentRefresh = initOptions ? initOptions.flow === 'implicit' : false;\n  }\n\n  /**\n   * Keycloak initialization. It should be called to initialize the adapter.\n   * Options is a object with 2 main parameters: config and initOptions. The first one\n   * will be used to create the Keycloak instance. The second one are options to initialize the\n   * keycloak instance.\n   *\n   * @param options\n   * Config: may be a string representing the keycloak URI or an object with the\n   * following content:\n   * - url: Keycloak json URL\n   * - realm: realm name\n   * - clientId: client id\n   *\n   * initOptions:\n   * Options to initialize the Keycloak adapter, matches the options as provided by Keycloak itself.\n   *\n   * enableBearerInterceptor:\n   * Flag to indicate if the bearer will added to the authorization header.\n   *\n   * loadUserProfileInStartUp:\n   * Indicates that the user profile should be loaded at the keycloak initialization,\n   * just after the login.\n   *\n   * bearerExcludedUrls:\n   * String Array to exclude the urls that should not have the Authorization Header automatically\n   * added.\n   *\n   * authorizationHeaderName:\n   * This value will be used as the Authorization Http Header name.\n   *\n   * bearerPrefix:\n   * This value will be included in the Authorization Http Header param.\n   *\n   * @returns\n   * A Promise with a boolean indicating if the initialization was successful.\n   */\n  public async init(options: KeycloakOptions = {}) {\n    this.initServiceValues(options);\n    const { config, initOptions } = options;\n\n    this._instance = Keycloak(config);\n    this.bindsKeycloakEvents();\n\n    const authenticated = await this._instance.init(initOptions);\n\n    if (authenticated && this._loadUserProfileAtStartUp) {\n      await this.loadUserProfile();\n    }\n\n    return authenticated;\n  }\n\n  /**\n   * Redirects to login form on (options is an optional object with redirectUri and/or\n   * prompt fields).\n   *\n   * @param options\n   * Object, where:\n   *  - redirectUri: Specifies the uri to redirect to after login.\n   *  - prompt:By default the login screen is displayed if the user is not logged-in to Keycloak.\n   * To only authenticate to the application if the user is already logged-in and not display the\n   * login page if the user is not logged-in, set this option to none. To always require\n   * re-authentication and ignore SSO, set this option to login .\n   *  - maxAge: Used just if user is already authenticated. Specifies maximum time since the\n   * authentication of user happened. If user is already authenticated for longer time than\n   * maxAge, the SSO is ignored and he will need to re-authenticate again.\n   *  - loginHint: Used to pre-fill the username/email field on the login form.\n   *  - action: If value is 'register' then user is redirected to registration page, otherwise to\n   * login page.\n   *  - locale: Specifies the desired locale for the UI.\n   * @returns\n   * A void Promise if the login is successful and after the user profile loading.\n   */\n  public async login(options: Keycloak.KeycloakLoginOptions = {}) {\n    await this._instance.login(options);\n\n    if (this._loadUserProfileAtStartUp) {\n      await this.loadUserProfile();\n    }\n  }\n\n  /**\n   * Redirects to logout.\n   *\n   * @param redirectUri\n   * Specifies the uri to redirect to after logout.\n   * @returns\n   * A void Promise if the logout was successful, cleaning also the userProfile.\n   */\n  public async logout(redirectUri?: string) {\n    const options = {\n      redirectUri,\n    };\n\n    await this._instance.logout(options);\n    this._userProfile = undefined;\n  }\n\n  /**\n   * Redirects to registration form. Shortcut for login with option\n   * action = 'register'. Options are same as for the login method but 'action' is set to\n   * 'register'.\n   *\n   * @param options\n   * login options\n   * @returns\n   * A void Promise if the register flow was successful.\n   */\n  public async register(\n    options: Keycloak.KeycloakLoginOptions = { action: 'register' }\n  ) {\n    await this._instance.register(options);\n  }\n\n  /**\n   * Check if the user has access to the specified role. It will look for roles in\n   * realm and clientId, but will not check if the user is logged in for better performance.\n   *\n   * @param role\n   * role name\n   * @param resource\n   * resource name If not specified, `clientId` is used\n   * @returns\n   * A boolean meaning if the user has the specified Role.\n   */\n  isUserInRole(role: string, resource?: string): boolean {\n    let hasRole: boolean;\n    hasRole = this._instance.hasResourceRole(role, resource);\n    if (!hasRole) {\n      hasRole = this._instance.hasRealmRole(role);\n    }\n    return hasRole;\n  }\n\n  /**\n   * Return the roles of the logged user. The allRoles parameter, with default value\n   * true, will return the clientId and realm roles associated with the logged user. If set to false\n   * it will only return the user roles associated with the clientId.\n   *\n   * @param allRoles\n   * Flag to set if all roles should be returned.(Optional: default value is true)\n   * @returns\n   * Array of Roles associated with the logged user.\n   */\n  getUserRoles(allRoles: boolean = true): string[] {\n    let roles: string[] = [];\n    if (this._instance.resourceAccess) {\n      for (const key in this._instance.resourceAccess) {\n        if (this._instance.resourceAccess.hasOwnProperty(key)) {\n          const resourceAccess: any = this._instance.resourceAccess[key];\n          const clientRoles = resourceAccess['roles'] || [];\n          roles = roles.concat(clientRoles);\n        }\n      }\n    }\n    if (allRoles && this._instance.realmAccess) {\n      const realmRoles = this._instance.realmAccess['roles'] || [];\n      roles.push(...realmRoles);\n    }\n    return roles;\n  }\n\n  /**\n   * Check if user is logged in.\n   *\n   * @returns\n   * A boolean that indicates if the user is logged in.\n   */\n  async isLoggedIn(): Promise<boolean> {\n    try {\n      if (!this._instance.authenticated) {\n        return false;\n      }\n      await this.updateToken(20);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Returns true if the token has less than minValidity seconds left before\n   * it expires.\n   *\n   * @param minValidity\n   * Seconds left. (minValidity) is optional. Default value is 0.\n   * @returns\n   * Boolean indicating if the token is expired.\n   */\n  isTokenExpired(minValidity: number = 0): boolean {\n    return this._instance.isTokenExpired(minValidity);\n  }\n\n  /**\n   * If the token expires within minValidity seconds the token is refreshed. If the\n   * session status iframe is enabled, the session status is also checked.\n   * Returns a promise telling if the token was refreshed or not. If the session is not active\n   * anymore, the promise is rejected.\n   *\n   * @param minValidity\n   * Seconds left. (minValidity is optional, if not specified 5 is used)\n   * @returns\n   * Promise with a boolean indicating if the token was succesfully updated.\n   */\n  public async updateToken(minValidity = 5) {\n    // TODO: this is a workaround until the silent refresh (issue #43)\n    // is not implemented, avoiding the redirect loop.\n    if (this._silentRefresh) {\n      if (this.isTokenExpired()) {\n        throw new Error(\n          'Failed to refresh the token, or the session is expired'\n        );\n      }\n\n      return true;\n    }\n\n    if (!this._instance) {\n      throw new Error('Keycloak Angular library is not initialized.');\n    }\n\n    return this._instance.updateToken(minValidity);\n  }\n\n  /**\n   * Loads the user profile.\n   * Returns promise to set functions to be invoked if the profile was loaded\n   * successfully, or if the profile could not be loaded.\n   *\n   * @param forceReload\n   * If true will force the loadUserProfile even if its already loaded.\n   * @returns\n   * A promise with the KeycloakProfile data loaded.\n   */\n  public async loadUserProfile(forceReload = false) {\n    if (this._userProfile && !forceReload) {\n      return this._userProfile;\n    }\n\n    if (!this._instance.authenticated) {\n      throw new Error(\n        'The user profile was not loaded as the user is not logged in.'\n      );\n    }\n\n    return this._userProfile = await this._instance.loadUserProfile();\n  }\n\n  /**\n   * Returns the authenticated token, calling updateToken to get a refreshed one if necessary.\n   */\n  public async getToken() {\n    await this.updateToken(10);\n    return this._instance.token;\n  }\n\n  /**\n   * Returns the logged username.\n   *\n   * @returns\n   * The logged username.\n   */\n  public getUsername() {\n    if (!this._userProfile) {\n      throw new Error('User not logged in or user profile was not loaded.');\n    }\n\n    return this._userProfile.username;\n  }\n\n  /**\n   * Clear authentication state, including tokens. This can be useful if application\n   * has detected the session was expired, for example if updating token fails.\n   * Invoking this results in onAuthLogout callback listener being invoked.\n   */\n  clearToken(): void {\n    this._instance.clearToken();\n  }\n\n  /**\n   * Adds a valid token in header. The key & value format is:\n   * Authorization Bearer <token>.\n   * If the headers param is undefined it will create the Angular headers object.\n   *\n   * @param headers\n   * Updated header with Authorization and Keycloak token.\n   * @returns\n   * An observable with with the HTTP Authorization header and the current token.\n   */\n  public addTokenToHeader(headers: HttpHeaders = new HttpHeaders()) {\n    return from(this.getToken()).pipe(\n      map((token) =>\n        token ? headers.set(this._authorizationHeaderName, this._bearerPrefix + token) : headers\n      )\n    );\n  }\n\n  /**\n   * Returns the original Keycloak instance, if you need any customization that\n   * this Angular service does not support yet. Use with caution.\n   *\n   * @returns\n   * The KeycloakInstance from keycloak-js.\n   */\n  getKeycloakInstance(): Keycloak.KeycloakInstance {\n    return this._instance;\n  }\n\n  /**\n   * Returns the excluded URLs that should not be considered by\n   * the http interceptor which automatically adds the authorization header in the Http Request.\n   *\n   * @returns\n   * The excluded urls that must not be intercepted by the KeycloakBearerInterceptor.\n   */\n  get excludedUrls(): ExcludedUrlRegex[] {\n    return this._excludedUrls;\n  }\n\n  /**\n   * Flag to indicate if the bearer will be added to the authorization header.\n   *\n   * @returns\n   * Returns if the bearer interceptor was set to be disabled.\n   */\n  get enableBearerInterceptor(): boolean {\n    return this._enableBearerInterceptor;\n  }\n\n  /**\n   * Keycloak subject to monitor the events triggered by keycloak-js.\n   * The following events as available (as described at keycloak docs -\n   * https://www.keycloak.org/docs/latest/securing_apps/index.html#callback-events):\n   * - OnAuthError\n   * - OnAuthLogout\n   * - OnAuthRefreshError\n   * - OnAuthRefreshSuccess\n   * - OnAuthSuccess\n   * - OnReady\n   * - OnTokenExpire\n   * In each occurrence of any of these, this subject will return the event type,\n   * described at {@link KeycloakEventType} enum and the function args from the keycloak-js\n   * if provided any.\n   *\n   * @returns\n   * A subject with the {@link KeycloakEvent} which describes the event type and attaches the\n   * function args.\n   */\n  get keycloakEvents$(): Subject<KeycloakEvent> {\n    return this._keycloakEvents$;\n  }\n}\n","/**\n * @license\n * Copyright Mauricio Gemelli Vigolo and contributors.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/LICENSE\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent\n} from '@angular/common/http';\n\nimport { Observable, from } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nimport { KeycloakService } from '../services/keycloak.service';\nimport { ExcludedUrlRegex } from '../interfaces/keycloak-options';\n\n/**\n * This interceptor includes the bearer by default in all HttpClient requests.\n *\n * If you need to exclude some URLs from adding the bearer, please, take a look\n * at the {@link KeycloakOptions} bearerExcludedUrls property.\n */\n@Injectable()\nexport class KeycloakBearerInterceptor implements HttpInterceptor {\n  constructor(private keycloak: KeycloakService) {}\n\n  /**\n   * Checks if the url is excluded from having the Bearer Authorization\n   * header added.\n   *\n   * @param req http request from @angular http module.\n   * @param excludedUrlRegex contains the url pattern and the http methods,\n   * excluded from adding the bearer at the Http Request.\n   */\n  private isUrlExcluded(\n    { method, url }: HttpRequest<any>,\n    { urlPattern, httpMethods }: ExcludedUrlRegex\n  ): boolean {\n    const httpTest =\n      httpMethods.length === 0 ||\n      httpMethods.join().indexOf(method.toUpperCase()) > -1;\n\n    const urlTest = urlPattern.test(url);\n\n    return httpTest && urlTest;\n  }\n\n  /**\n   * Intercept implementation that checks if the request url matches the excludedUrls.\n   * If not, adds the Authorization header to the request if the user is logged in.\n   *\n   * @param req\n   * @param next\n   */\n  public intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const { enableBearerInterceptor, excludedUrls } = this.keycloak;\n    if (!enableBearerInterceptor) {\n      return next.handle(req);\n    }\n\n    const shallPass: boolean =\n      excludedUrls.findIndex(item => this.isUrlExcluded(req, item)) > -1;\n    if (shallPass) {\n      return next.handle(req);\n    }\n\n    return from(this.keycloak.isLoggedIn()).pipe(\n      mergeMap((loggedIn: boolean) => loggedIn\n        ? this.handleRequestWithTokenHeader(req, next)\n        : next.handle(req))\n    );\n  }\n\n  /**\n   * Adds the token of the current user to the Authorization header\n   *\n   * @param req\n   * @param next\n   */\n  private handleRequestWithTokenHeader(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<any> {\n    return this.keycloak.addTokenToHeader(req.headers).pipe(\n      mergeMap(headersWithBearer => {\n        const kcReq = req.clone({ headers: headersWithBearer });\n        return next.handle(kcReq);\n      })\n    );\n  }\n}\n","/**\n * @license\n * Copyright Mauricio Gemelli Vigolo and contributors.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/LICENSE\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { KeycloakService } from './services/keycloak.service';\nimport { KeycloakBearerInterceptor } from './interceptors/keycloak-bearer.interceptor';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    KeycloakService,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: KeycloakBearerInterceptor,\n      multi: true\n    }\n  ]\n})\nexport class CoreModule {}\n","/**\n * @license\n * Copyright Mauricio Gemelli Vigolo and contributors.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/LICENSE\n */\n\nimport { NgModule } from '@angular/core';\n\nimport { CoreModule } from './core/core.module';\n\n@NgModule({\n  imports: [CoreModule]\n})\nexport class KeycloakAngularModule {}\n"]},"metadata":{},"sourceType":"module"}